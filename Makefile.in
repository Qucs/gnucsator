# Makefile for gnucap-qucs
# (c) Felix Salfelder 2015-20
# License: GPLv3+
#
# TODO: use autotools (or so) instead, and only use MakeList.

PACKAGE_NAME = gnucap-qucs
PACKAGE_VERSION = 0.0.0

GNUCAP_CONF = $(shell which gnucap-conf$(SUFFIX))
GNUCAP_MODELGEN = gnucap-modelgen

# BUG: use tests/MakeList
TESTFILES_PAT = \
  tests/*.gc \
  tests/*.gc.ref \
  tests/*.gc.out

include MakeList
include Make2

ifneq ($(GNUCAP_CONF),)
    $(info asking $(GNUCAP_CONF))
	 # TODO. complete the move to configure.
    CXX             = $(shell $(GNUCAP_CONF) --cxx)   # c++
    GNUCAP_CPPFLAGS = $(shell $(GNUCAP_CONF) --cppflags) -DADD_VERSION
	GNUCAP_LDFLAGS  = $(shell $(GNUCAP_CONF) --ldflags)
    GNUCAP_CXXFLAGS = $(shell $(GNUCAP_CONF) --cxxflags)

else
    $(error no gnucap-conf, this will not work)
endif

GNUCAP_LIBS        = @libs@
GNUCAP_PLUGPATH    = @plugpath@
GNUCAP_EXEC_PREFIX = @prefix@
GNUCAP_PKGLIBDIR   = @pkglibdir@
GNUCSATOR_PKGLIBDIR=${GNUCAP_PKGLIBDIR}/qucs
GNUCAP_SYSCONFDIR  = @sysconfdir@

ifneq ($(PREFIX),)
    $(info prefix is ${PREFIX}. overriding some)
	 GNUCAP_LIBDIR = ${PREFIX}/lib
	 GNUCSATOR_PKGLIBDIR = ${GNUCAP_LIBDIR}/gnucap/qucs
endif

# TODO: what do we get from gnucap-conf and why?
# GNUCAP_CXXFLAGS+= -shared

# for now. does it make sense?
GNUCSATOR_CXXFLAGS = -std=c++11 -fPIC $(GNUCAP_CXXFLAGS) $(CXXFLAGS)

# TODO: is this platform dependent?
GSL_LIBS = -lgsl -lblas -lgslcblas

EXECUTABLES = \
  ${bin_PROGRAMS} ${dist_bin_SCRIPTS} ${contrib_bin_SCRIPTS}

all: gnucsator.rc

gnucsator.rc: gnucsator.rc.in
	@echo "WARNING: gnucsator.rc may be outdated."
	@echo "         rerun configure if needed."

main.o: gnucsator.cc
	$(CXX) $(GNUCSATOR_CXXFLAGS) -DHAVE_CONFIG $(CPPFLAGS) $(GNUCAP_CPPFLAGS) $(GNUCSATOR_CPPFLAGS) -fPIC -c -o $@ $<

main.o: config.h

gnucsator: main.o
	$(CXX) $(GNUCSATOR_CXXFLAGS) -o $@ $< $(GNUCAP_LDFLAGS) ${GNUCAP_LIBS} # 1

# QUCS_DEVS = opamp cccs
# QUCS_DEVS_SO = $(QUCS_DEVS:%=d_qucs_%.so)

# LDLIBS =

GNUCSATOR_CPPFLAGS+= -DDEFAULT_SYSTEMSTARTPATH=\"${GNUCAP_SYSCONFDIR}\"
GNUCSATOR_CPPFLAGS+= -DUSERSTARTFILE=\"gnucap_rc\"
GNUCSATOR_CPPFLAGS+= -DUSERSTARTPATH=\".\"
GNUCSATOR_CPPFLAGS+= -DDEFAULT_PLUGINS=\"gnucap-default-plugins.so\"
GNUCSATOR_CPPFLAGS+= -DDEFAULT_LANGUAGE=\"acs\"

QUCS_PLUGINS = ${PLUGIN_CC:%.cc=%.so} ${PLUGIN_MODEL:%.model=%.so}
QUCSATOR_OBJS = \
	qucsator/fspecial.o \
	qucsator/complex.o \
	qucsator/matrix.o \
	qucsator/real.o \
	qucsator/vector.o

# todo
MY_CPPFLAGS = -I.
microstrip_wrap.so: MY_CPPFLAGS=-Iqucsator
microstrip_wrap.so: OBJS = ${MICROSTRIP_OBJS} ${QUCSATOR_OBJS}
microstrip_wrap.so: MY_CXXFLAGS = -Wno-suggest-override -Wno-class-memaccess

#does not work.
#mscoupled_wrap.so: qucsator/mscoupled.o qucsator/msline.o ${QUCSATOR_OBJS}

subst_wrap.so: MY_CPPFLAGS=-Iqucsator
subst_wrap.so: OBJS = qucsator/substrate.o ${QUCSATOR_OBJS}
subst_wrap.so: MY_CXXFLAGS = -Wno-suggest-override -Wno-class-memaccess

d_bjt.cc: d_diode.cc
%.cc %.h: %.model
	$(AM_V_GEN)$(GNUCAP_MODELGEN) $<
	@touch $*.cc

all-recursive:
	$(MAKE) -C qucsator GNUCAP_CPPFLAGS="${GNUCAP_CPPFLAGS}"

all: all-recursive $(QUCS_PLUGINS) ${EXECUTABLES}

CLEANFILES = $(QUCS_PLUGINS) *.o *~

d_poly_g_uf.so: u_parameter_uf.h m_mvpoly.h

lang_qucs.so: l_qucs.h
cmd_wrapper.so: l_qucs.h

dbg:
	echo $(QUCS_DEVS_SO)

$(QUCS_DEVS_SO): d_qucs_%.so: qucs_wrapper.cc
	$(CXX) $(GNUCSATOR_CXXFLAGS) $(GNUCAP_CXXFLAGS) -DQUCS_DEVICE=$* \
		$(CPPFLAGS) $(QUCSATOR_CPPFLAGS) $(GNUCAP_CPPFLAGS) -o $@ \
		$< $(QUCS_LDFLAGS) $(QUCS_LIBS) \
	$(LDLIBS)

%.so : %.cc
	$(CXX) $(GNUCSATOR_CXXFLAGS) $(MY_CXXFLAGS) ${MY_CPPFLAGS} $(CPPFLAGS) $(GNUCAP_CPPFLAGS) -o $@ $< $(LDLIBS) $(OBJS) -shared # 2

${QUCS_PLUGINS}: %.so: %.cc

gncp: main.o config.h
	$(CXX) $(GNUCSATOR_CXXFLAGS) $(CPPFLAGS) $(GNUCAP_CPPFLAGS) -o $@ $< $(GNUCAP_LDFLAGS) $(LIBS)

s_sparam.so: LDLIBS=${GSL_LIBS}

QUCS_INCLUDEDIR = $(QUCS_PREFIX)/include
QUCSATOR_CPPFLAGS = -I$(QUCS_INCLUDEDIR) -I$(QUCS_INCLUDEDIR)/qucs-core
QUCS_LDFLAGS = -L$(QUCS_PREFIX)/lib
QUCS_LIBS = -lqucs

GNUCSATOR_RC = gnucsator.rc
PKGINCLUDEDIR = @PKGINCLUDEDIR@

install: $(QUCS_PLUGINS) gnucsator.sh gnucsator
	-install -d $(DESTDIR)$(GNUCSATOR_PKGLIBDIR)
	install $(QUCS_PLUGINS) $(DESTDIR)$(GNUCSATOR_PKGLIBDIR)

	-install -d $(DESTDIR)$(GNUCAP_EXEC_PREFIX)/bin
	install $(EXECUTABLES) $(DESTDIR)$(GNUCAP_EXEC_PREFIX)/bin

	-install -d $(DESTDIR)$(GNUCAP_SYSCONFDIR)
	install $(GNUCSATOR_RC) $(DESTDIR)$(GNUCAP_SYSCONFDIR)

	${MAKE} -C include install PKGINCLUDEDIR=${PKGINCLUDEDIR}

uninstall:
	(cd $(GNUCAP_LIBDIR)/qucs ; rm $(QUCS_PLUGINS))

clean-recursive:
	$(MAKE) -C qucsator clean

clean: clean-recursive
	rm -f $(CLEANFILES)

info:
	@echo GNUCAP_PKGLIBDIR: ${GNUCAP_PKGLIBDIR}
	@echo GNUCAP_PLUGPATH: ${GNUCAP_PLUGPATH}

distclean: clean
	rm Make.override

# BUG: the rule for config.h is missing.
define NOTICE
#THIS FILE IS AUTOMATICALLY GENERATED
endef

Make2:
	[ -e $@ ] || echo "# here you may override settings\n#CPPFLAGS = -DDO_TRACE -DTRACE_UNTESTED\n#CXXFLAGS = -O0 -g3" > $@

check: all
	$(MAKE) -C tests check GNUCAP_PLUGPATH=${GNUCAP_PLUGPATH} \
		GNUCAP_PKGLIBDIR=${GNUCAP_PKGLIBDIR}

include include/MakeList

DIST_FILES = \
	MakeList Makefile.in \
	include/MakeList \
	${bin_PROGRAMS:%=%.cc} \
	${dist_bin_SCRIPTS} \
	${noinst_HEADERS} \
	${EXTRA_DIST} \
	${INCLUDE_FILES:%=include/%} \
	${PLUGIN_CC} \
	${TEST_EXTRA_DIST}

dist:
	tar --transform "s|^|${PACKAGE_NAME}-${PACKAGE_VERSION}/|" \
		-cjf ${PACKAGE_NAME}-${PACKAGE_VERSION}.bz2 ${DIST_FILES}

.PHONY: all-recursive

Makefile: Makefile.in
	@echo Makefile is outdated. configure?
